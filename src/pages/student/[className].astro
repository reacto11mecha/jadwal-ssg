---
import { JadwalStudentJson, WaktuJson, getDay, type IIndividualClassStudent } from "@utils/schedule";
import Layout from "@layouts/Layout.astro";

import { DynamicDate } from "@components/student/DynamicDate";
import { ClassNavigator } from "@components/student/ClassNavigator";

import rawScheduleStudentData from "@data/jadwal-siswa.json";
import rawTimeData from "@data/waktu.json";

const { TimeAllocation: timeAlloc, TZ: Timezone } = await WaktuJson.parseAsync(rawTimeData);
const scheduleDataSafe = await JadwalStudentJson.parseAsync(rawScheduleStudentData);

export async function getStaticPaths() {
  const scheduleDataSafe = await JadwalStudentJson.parseAsync(rawScheduleStudentData);

  return scheduleDataSafe.map((schedule) => ({
    params: { className: schedule.className },
    props: schedule,
  }));
}

const { className, schedules } = Astro.props as IIndividualClassStudent;

---

<Layout
  title={`Jadwal Pelajaran Kelas ${className}`}
  description={`Info lengkap tentang jadwal pelajaran kelas ${className}`}
>
  <span class="hidden" id="data-store" data-information={JSON.stringify({ scheduleLength: schedules.length - 1, timeAlloc, Timezone })}></span>

  <header class="pt-5 sm:pt-10 flex justify-center align-center w-full">
    <h1
      class="text-center text-poppins text-3xl md:text-4xl w-[50%] font-medium"
    >
      Jadwal Pelajaran Kelas {className}
    </h1>
  </header>

  <main class="grid grid-cols-1 md:grid-cols-2 gap-3 pt-7 sm:pt-10 pb-24 px-3 justify-center">
    {
      schedules.map((schedule) => (
        <div class="border rounded dark:border-sm dark:bg-neutral-900 dark:border-neutral-900 p-5" data-day={schedule.day}>
          <h3 class="pb-3 text-poppins font-semibold text-lg md:text-xl">
            {getDay(schedule.day)}<DynamicDate client:idle 
              Timezone={Timezone}
              alloc={timeAlloc
                .find((time) => time.currentDay === schedule.day)!
                .alloc}
              allSchedulesLength={schedules.length}
              schedule={schedule}
            />
          </h3>
          <table class="table-auto w-full">
            <thead class="bg-blue-600 dark:bg-blue-800 text-gray-100 text-poppins text-lg">
              <tr class="h-10">
                <th class="text-start pl-3">JAM KE-</th>
                <th class="text-center">Mapel</th>
                <th class="text-end pr-3">Waktu</th>
              </tr>
            </thead>
            <tbody class="gap-5">
              {timeAlloc
                .find((time) => time.currentDay === schedule.day)!
                .alloc.filter(d => {
                  // Cek jika tidak ada jam pada saat ini
                  if (d.JAM) {
                    const currentJam = schedule.lessons.at(d.JAM - 1)!;

                    return currentJam.lesson
                  }

                  return true;
                }).map((time) => (
                  <tr class={`text-lato text-lg h-12 ${time.isBreak ? "bg-sky-300 dark:bg-sky-900" : "light:even:bg-zinc-800 odd:bg-slate-100 dark:even-zinc-900 dark:odd:bg-slate-900"}`}>
                    {!time.isBreak ? (
                      <td class="pl-3">{time.JAM}</td>
                      <td class="text-center py-3 flex flex-col">
                        <p>
                          <span class="font-semibold">{schedule.lessons[time.JAM! - 1].lesson ?? ""}</span>
                          {schedule.lessons[time.JAM! - 1].lesson?.includes("SUNDA") && (
                            <>
                              {"  "}
                              <small>
                                (Jangan Lupa Totopong dan Kamus!)
                              </small>{" "}
                            </>
                          )}
                          {schedule.lessons[time.JAM! - 1].lesson === "PENJAS" && (
                            <>
                              {"  "}
                              <small>
                                (Jangan Lupa Baju Olahraga!)
                              </small>{" "}
                            </>
                          )}
                        </p>
                        {schedule.lessons[time.JAM! - 1].name && (
                          <p>{schedule.lessons[time.JAM! - 1].name}</p>
                        )}
                      </td>
                    ) : (
                      <td colspan="2" class="text-center font-semibold">ISTIRAHAT</td>
                    )}
                    <td class="pr-3 text-end">{time.WAKTU.join(" - ")}</td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      ))
    }
  </main>

  <ClassNavigator client:idle currentClass={className} classList={scheduleDataSafe.map((schedule) => schedule.className)} />

  <script>
    import { DateTime } from "luxon";

    function main() {
      const storeElement = document.querySelector("#data-store");

      if (storeElement instanceof HTMLElement) {
        type ITimeAllocation = {
          alloc: {
              WAKTU: string[];
              JAM?: number | undefined;
              isBreak?: boolean | undefined;
          }[];
          currentDay: number;
        }


        type TParsedDataset = {
          scheduleLength: number;
          timeAlloc: ITimeAllocation[];
          Timezone: string
        }

        const { scheduleLength, timeAlloc, Timezone } = JSON.parse(storeElement.dataset.information as string) as TParsedDataset;

        const { alloc: lastAlloc } = timeAlloc[timeAlloc.length - 1];
        const lastSubAlloc = lastAlloc[lastAlloc.length - 1].WAKTU[1].replace(".", ":");
        const lastHourAndMinute = lastSubAlloc.split(":");

        const now = DateTime.now().setZone(Timezone);

        const isNextWeek =
          DateTime.now()
            .setZone(Timezone)
            .startOf("week")
            .plus({ days: scheduleLength })
            .set({
              hour: parseInt(lastHourAndMinute[0]),
              minute: parseInt(lastHourAndMinute[1]),
            }) <= now;

        if (isNextWeek) {
          const targetCard = document.querySelector('[data-day="1"]');

          targetCard?.scrollIntoView({
            behavior: "smooth",
          });

          return;
        }

        const { alloc: allocationByDay } = timeAlloc.find(({ currentDay }) => currentDay === now.weekday)!;
        const lastTimeByCurrentDay = allocationByDay[allocationByDay.length - 1].WAKTU[1].replace(".", ":");
        const currentDaylastHourAndMinute = lastTimeByCurrentDay.split(":");

        const isTheEndOfTheDay = DateTime.now()
          .setZone(Timezone)
          .set({
            hour: parseInt(currentDaylastHourAndMinute[0]),
            minute: parseInt(currentDaylastHourAndMinute[1]),
          }) <= now;

        if (isTheEndOfTheDay) {
          const targetCard = document.querySelector(`[data-day="${now.weekday + 1}"]`);

          targetCard?.scrollIntoView({
            behavior: "smooth",
          });

          return;
        }

        const currentDayCard = document.querySelector(`[data-day="${now.weekday}"]`);

        currentDayCard?.scrollIntoView({
          behavior: "smooth",
        });
      }
    }

    main()
  </script>
</Layout>
